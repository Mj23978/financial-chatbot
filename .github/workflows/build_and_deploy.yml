
# name: Build and Deploy
# on: [pull_request]

# jobs:
#   lint-testing:
#     name: Code Formatting Tests
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v1
#     - name: Set up Python 3.7
#       uses: actions/setup-python@v1
#       with:
#         python-version: 3.7
#     - name: Install dependencies
#       run: |
#         python -m pip install -U pip
#         pip install -r requirements-dev.txt
#     - name: Code Formatting Tests
#       working-directory: ${{ github.workspace }}
#       run: |
#         make lint
#   type-testing:
#     name: Type Tests
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v1
#     - name: Set up Python 3.7
#       uses: actions/setup-python@v1
#       with:
#         python-version: 3.7
#     - name: Install dependencies
#       run: |
#         python -m pip install -U pip
#         pip install -r requirements-dev.txt
#     - name: Type Checking
#       working-directory: ${{ github.workspace }}
#       run: |
#         make types
#   unit-testing:
#     name: Unit Tests
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v1
#     - name: Set up Python 3.7
#       uses: actions/setup-python@v1
#       with:
#         python-version: 3.7
#     - name: Install dependencies
#       run: |
#         python -m pip install -U pip
#         pip install -r requirements-dev.txt
#     - name: Unit Tests
#       working-directory: ${{ github.workspace }}
#       run: |
#         pytest .

#   training-testing:
#     name: Training and Testing
#     runs-on: ubuntu-latest
#     needs: [lint-testing, type-testing]
#     services:
#        # Label used to access the service container
#        duckling:
#          image: rasa/duckling
#          ports:
#          # Maps port 8000 on service container to port 8000 on host VM
#          - 8000:8000
#     steps:
#       - uses: actions/checkout@v1
#       - id: files
#         uses: jitterbit/get-changed-files@v1
#       - name: set_training
#         if: |
#             contains(  steps.files.outputs.all, 'data/' )
#             || contains(  steps.files.outputs.all, 'config.yml' )
#             || contains(  steps.files.outputs.all, 'domain.yml' )
#         run: echo "RUN_TRAINING=true" >> $GITHUB_ENV
#       - name: Rasa Train and Test GitHub Action
#         if: env.RUN_TRAINING == 'true'
#         uses: RasaHQ/rasa-train-test-gha@main
#         with:
#           rasa_version: '2.4.0-spacy-en'
#           test_type: all
#           data_validate: true
#           cross_validation: true
#           publish_summary: true
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#       - name: Upload model
#         if: github.ref == 'refs/heads/main'
#         uses: actions/upload-artifact@main
#         with:
#           name: model
#           path: models
